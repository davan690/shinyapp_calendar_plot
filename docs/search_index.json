[
["index.html", "My calender management Preface", " My calender management Anthony Davidson 2020-07-14 Preface The problem with much of my time management now that I am attempting to work with the skills obtained during my PhD is that I have so many different projects running at/in different levels of development and collaboration. This is my first attempt to apply my tidyPipes workflow (Figure above) to my project management and integrate this into my normal workflow. Generally, this work is focused on writing the scripts to automate the intergration between emails, PhD timeline and other projects. To do this we need to import datasets and modify the structure of these imputs to match the information needed to contruct a timeline of tasks and objectives. "],
["introduction.html", "Chapter 1 Introduction 1.1 Data setup 1.2 Visualisation 1.3 Feedback loop", " Chapter 1 Introduction Navigating the path between graduate studies and an academic career is adiffucult task at the best of times. One of the key steps in becoming a setablish researcher in the current academic enviroment. To do this efficetifcely, time management is key, however when there are so many little projects running it can be hard to know what to work on. This document is to record the method to proposing my 6month timeline for my PhD completion, as well as, showing the key aspects of the tidyPipes approach to research and the draft project plan for the inveribrate work I am proposing to do with Ben Kefford’s lab. 1.1 Data setup Generally the concept is to create a baseline dataset of information and then extend this using dataspice to create a tidy format of data that can then be modelled and visualised using the tidyverse suite of tools. library(knitr) ## Warning: package &#39;knitr&#39; was built under R version 4.0.2 knitr::include_graphics(path = &quot;./img/TidyPipes-calenderJUL2020v2.png&quot;) 1.2 Visualisation Creating timeline charts in R (Generating Timeline charts) We will use ggplot function from ggplot2 package to generate timeline charts. The following functions are used to add layers of details to the chart. Workout timeline with a heat-map of calories burnt with activity type Timeline charts can be used in a lot of applications like tracking equipment or a process status changes, resource availability &amp; scheduling, project timelines, documenting start and end times of events. The beauty of ggplot2 package is that the code can be easily customized, and more details can be added to the plots. To do this I have created a calendar for each key project/impact/aspect of short-term timeline, objectives, as well as, my career and life projection. To begin with I need to create timelines and other project goals under covid19. I have put this into a single dataset called dat here. 1.3 Feedback loop To create the feedback loop (to get information back from supervisors) I have began to develop a interactive shiny app within the same structure as the baseline dataset so that there is limited coding needed to create the tidypipes “cycle” of community engagement. library(knitr) knitr::include_graphics(path = &quot;./img/preview.png&quot;) "],
["methods.html", "Chapter 2 Methods 2.1 Timeline 2.2 Individual projects 2.3 Council tasks 2.4 UC-Invertebrates", " Chapter 2 Methods As computational work takes over our regular management of time over the tradional hard copy “diary”. I like this because important information can not be left in the “local cafe” however as I have used “gmail”, “outlook” and there suites of applications and tools for calenders I have muddled everything up and missed appointments etc. To try and counter this I have developed a tidypipes workflow for my tasks, projects and other collarorations. See presentation here. 2.0.1 Data/information Overall this is time series data. A good general tutorial for this sort of data is here on youtube. There are several ways to visualise this data, below are two selected bits of code that do this. Overall there are two generalised datasets that may be helpful to other individuals for each project or combination of projects (for the APR for example). 2.0.1.1 Plot 1 2.0.1.2 Plot 2 2.0.2 Baseline dataset The data for this collection of tasks associated with timelines and targets. The baseline dataset is found in the .xlsx file named “baseline-dataset-calender.xlsx”. This is the base file I have been adding information to when I change the overall structure of the calendar projects. 2.0.2.1 .xlsx These are excel workbooks. For now this is very simple and works with the current version of excel files (2020). Each “sheet” of the excel file contains a single projects information. This is then converted to a csv file when needed. In the future each project will have its own file that can be added to or modified in a shiny interactive web app. #excel read #number of sheets in project currently ## Saved as csv&#39;s and imported as so below... 2.0.2.2 .csv Generally the data can be imported as a csv, or other form. library(readr) ## Warning: package &#39;readr&#39; was built under R version 4.0.2 emailsCalender1 &lt;- read_csv(&quot;data/anuemails.CSV&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## `Start Time` = col_time(format = &quot;&quot;), ## `End Time` = col_time(format = &quot;&quot;), ## `All day event` = col_logical(), ## `Reminder on/off` = col_logical(), ## `Reminder Time` = col_time(format = &quot;&quot;), ## `Billing Information` = col_logical(), ## Mileage = col_logical(), ## Private = col_logical(), ## `Show time as` = col_double() ## ) ## See spec(...) for full column specifications. #str(emailsCalender1) 2.0.2.3 .iCal For calendars in Outlook the file type is iCal. There are packages that deal with these files in R. There is alot of my development work in this section because I need a way to document all the council emails and other work that I have undertaken as part of the COVID19 pandemic in Australia. #ical data #export 2.0.2.3.1 ical documentation [Robin Lovelace] calendar allows you to read-in ical files (which typically have the .ics filetype) with ic_read(). However, often it’s useful to create your own ical object from scratch. The purpose of this vignette is to show how, with reference to a real-world application: creating a timetable for a new module. It assumes you’ve installed the package following instructions in the README and have attached it as follows: library(calendar) ## Warning: package &#39;calendar&#39; was built under R version 4.0.2 #&gt; Warning: package &#39;calendar&#39; was built under R version 4.0.2 2.0.2.3.1.1 Creating events The building blocks of most calendars the event. All events have a start point and an end point (unless they are an all day event) and a summary description. As shown in the example below, they also tend to contain other fields. # key:value pairs in an ical example: ic_list(ical_example)[[1]] ## [1] &quot;DTSTART:20180809T160000Z&quot; ## [2] &quot;DTEND:20180809T163000Z&quot; ## [3] &quot;DTSTAMP:20180810T094100Z&quot; ## [4] &quot;UID:1119ejg4vug5758527atjcrqj3@google.com&quot; ## [5] &quot;CREATED:20180807T133712Z&quot; ## [6] &quot;DESCRIPTION:\\\\n&quot; ## [7] &quot;LAST-MODIFIED:20180807T133712Z&quot; ## [8] &quot;LOCATION:&quot; ## [9] &quot;SEQUENCE:0&quot; ## [10] &quot;STATUS:CONFIRMED&quot; ## [11] &quot;SUMMARY:ical programming mission&quot; ## [12] &quot;TRANSP:OPAQUE&quot; #&gt; [1] &quot;DTSTART:20180809T160000Z&quot; #&gt; [2] &quot;DTEND:20180809T163000Z&quot; #&gt; [3] &quot;DTSTAMP:20180810T094100Z&quot; #&gt; [4] &quot;UID:1119ejg4vug5758527atjcrqj3@google.com&quot; #&gt; [5] &quot;CREATED:20180807T133712Z&quot; #&gt; [6] &quot;DESCRIPTION:\\\\n&quot; #&gt; [7] &quot;LAST-MODIFIED:20180807T133712Z&quot; #&gt; [8] &quot;LOCATION:&quot; #&gt; [9] &quot;SEQUENCE:0&quot; #&gt; [10] &quot;STATUS:CONFIRMED&quot; #&gt; [11] &quot;SUMMARY:ical programming mission&quot; #&gt; [12] &quot;TRANSP:OPAQUE&quot; Fortunately you don’t need to specify all of these when creating events because some will be created manually and some are not necessary. Events can be created as follows (this one creates a 5 day trip): library(calendar) s = as.POSIXct(&quot;2019-01-12&quot;) e = s + 60^2 * 24 *5 event = ic_event(start = s, end = e , summary = &quot;Research trip&quot;) event ## # A tibble: 1 x 4 ## UID DTSTART DTEND SUMMARY ## &lt;chr&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 ical-976989af-cb86-4126-b9~ 2019-01-12 00:00:00 2019-01-17 00:00:00 Research ~ #&gt; # A tibble: 1 x 4 #&gt; UID DTSTART DTEND SUMMARY #&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; #&gt; 1 ical-6742dca9-cef7-4377-9c~ 2019-01-12 00:00:00 2019-01-17 00:00:00 Research ~ class(event) ## [1] &quot;ical&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; #&gt; [1] &quot;ical&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; ic_character(event) ## [1] &quot;BEGIN:VCALENDAR&quot; ## [2] &quot;PRODID:-//ATFutures/ical //EN&quot; ## [3] &quot;VERSION:2.0&quot; ## [4] &quot;CALSCALE:GREGORIAN&quot; ## [5] &quot;METHOD:PUBLISH&quot; ## [6] &quot;BEGIN:VEVENT&quot; ## [7] &quot;UID:ical-976989af-cb86-4126-b9cd-b87173defcb6&quot; ## [8] &quot;DTSTART:20190112T000000&quot; ## [9] &quot;DTEND:20190117T000000&quot; ## [10] &quot;SUMMARY:Research trip&quot; ## [11] &quot;END:VEVENT&quot; ## [12] &quot;END:VCALENDAR&quot; #&gt; [1] &quot;BEGIN:VCALENDAR&quot; #&gt; [2] &quot;PRODID:-//ATFutures/ical //EN&quot; #&gt; [3] &quot;VERSION:2.0&quot; #&gt; [4] &quot;CALSCALE:GREGORIAN&quot; #&gt; [5] &quot;METHOD:PUBLISH&quot; #&gt; [6] &quot;BEGIN:VEVENT&quot; #&gt; [7] &quot;UID:ical-6742dca9-cef7-4377-9c05-7bc4913eaacb&quot; #&gt; [8] &quot;DTSTART:20190112T000000&quot; #&gt; [9] &quot;DTEND:20190117T000000&quot; #&gt; [10] &quot;SUMMARY:Research trip&quot; #&gt; [11] &quot;END:VEVENT&quot; #&gt; [12] &quot;END:VCALENDAR&quot; 2.0.3 Summarised actions These sources of data are combined for my general timeline below. # DT::datatable(emailsCalender1) ## handmade data DT::datatable(data_actions) 2.1 Timeline One of the tricky bits about timelines is the format of the date and time of each event. This is different for each event so therefore we have four columns to incorporate this information in the following from for this repository and database. This will also mean that some of the information in other formats will have to be converted into these dimension and any other elements defined in each dataset I am combining to make a overall timeline. 2.1.1 Overall timeline By integrating these stage with some dataspice code/approach’s allows for me to generate metadata from each sheet of the excel file quickly using R. Here are the steps to do this. #dataspice from github library(dataspice) #each project needs to be imported and then saved as csv in raw_data file to document variable names etc correctly into the json dataset. # raw_data &lt;- project2 &lt;- readxl::read_excel(&quot;./data/Sem two planning.xlsx&quot;, sheet = 4) project2 ## # A tibble: 22 x 9 ## eventCode shortName month startDate finishDate description src ucX week ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; ## 1 scr202007~ WorldRef~ june 20/06/20~ 20/06/2020 World Refu~ NA NA NA ## 2 scr202007~ Oweek july &lt;NA&gt; &lt;NA&gt; O week for~ NA NA NA ## 3 scr202007~ ReasonSt~ augu~ &lt;NA&gt; &lt;NA&gt; Statement ~ NA NA NA ## 4 scr202007~ SSAFsurv~ augu~ &lt;NA&gt; &lt;NA&gt; SSAF Survey NA NA NA ## 5 scr202007~ TownHall2 augu~ &lt;NA&gt; &lt;NA&gt; Town HAll NA NA NA ## 6 scr202007~ openDay augu~ &lt;NA&gt; &lt;NA&gt; Open Day 2~ NA NA NA ## 7 scr202007~ nic21st augu~ &lt;NA&gt; &lt;NA&gt; Nicks 21st~ NA NA NA ## 8 scr202007~ SSAFbids sept~ &lt;NA&gt; &lt;NA&gt; SSAF Bids ~ NA NA NA ## 9 scr202007~ Grad sept~ &lt;NA&gt; &lt;NA&gt; Graduation NA NA NA ## 10 scr202007~ SSAFFunds sept~ &lt;NA&gt; &lt;NA&gt; SSAF Commi~ NA NA NA ## # ... with 12 more rows #date #time #location 2.1.2 Figures These can be generated using ggplot and other tidyverse approaches due to the implantation of the dataspice packages above. library(ggplot2) ## Warning: package &#39;ggplot2&#39; was built under R version 4.0.2 2.2 Individual projects Each of my tasks come from a collection of overall projects I collaborate on and develop code with on timeframes that range from monthly to undefined. The current projects I have integrated into my timeline are: 2.2.1 PhD Over the duration of my PhD I have currently developed my thesis and publications to align with a 6 month hand-in date from the 1st July 2020. project1 &lt;- readxl::read_excel(&quot;./data/Sem two planning.xlsx&quot;, sheet = 3) DT::datatable(head(project1)) 2.2.1.1 Introduction 2.2.1.2 Methods 2.2.1.3 Conclusion 2.2.1.4 Discussion 2.2.2 Previous achievements and tasks 2.3 Council tasks Being nominated to represent the Graduate community on the University of Canberra Council in November 2019 was a great honour. At the time I did understand the impact of project2 &lt;- readxl::read_excel(&quot;./data/Sem two planning.xlsx&quot;, sheet = 4) DT::datatable(head(project2)) 2.3.1 UC-Council Generally it is regarded that there will be about a week (40hrs) of background reading and investigation before each council meeting. Under covid19 conditions I think this may be much greater. Here are the general tasks and overall timetable of the Council obligations in 2020: dataCouncil &lt;- readxl::read_excel(&quot;./data/Sem two planning.xlsx&quot;, sheet = 3) DT::datatable(head(dataCouncil)) 2.3.2 UC-SRC This is a short demo site to help with planning for the SRC for semester 2 2020. 2.3.3 Supporting Reproducibility at UC My Phd studies put me in a unique situation where I can apply the tools and computational development I have done with my PhD and conceptually test the framework for the application in the education sector. UCdown councilCOMOS UCSRC covid support 2.4 UC-Invertebrates This work has its own repository so far. project3 &lt;- readxl::read_excel(&quot;./data/Sem two planning.xlsx&quot;, sheet = 5) DT::datatable(head(project3)) "],
["extra-projects.html", "Chapter 3 Extra projects 3.1 Courses 3.2 Seminars 3.3 Teaching 3.4 Community projects", " Chapter 3 Extra projects During Covid19 I have undertaken other additional learning and development tasks to keep me informed for my positions on Council and for my PhD work. 3.1 Courses Course Name Enrolment Date Paid Y/N Grade Achieved Using clinical health data for better healthcare 2019-07-01 N 0.00 A Life of Happiness and Fulfillment 2020-04-04 N 0.00 Science Matters: Let’s Talk About COVID-19 2020-04-03 N 0.00 Reproducible Research 2020-04-21 N 0.00 Understanding Clinical Research: Behind the Statistics 2020-04-04 N 0.00 The Science of Well-Being 2020-04-21 N 0.00 Learning How to Learn: Powerful mental tools to help you master tough subjects 2020-04-04 N 0.00 Mindshift: Break Through Obstacles to Learning and Discover Your Hidden Potential 2020-04-04 N 0.00 Mountains 101 2020-04-04 N 0.00 Machine Learning 2020-04-04 N 0.00 3.2 Seminars 3.3 Teaching 3.3.1 ANU: Climate Change 3.3.2 ANU: Masters Projects 3.4 Community projects "]
]
